#ifndef _INC_SPACEWIRE_H
#define _INC_SPACEWIRE_H
/*
Code automatically generated by asn1scc tool
Date was: 2/9/2011
Time was: 17:39:12
*/

#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccSint __po_hi_c_Core_Frequence_T;

#define __po_hi_c_Core_Frequence_T_REQUIRED_BYTES_FOR_ENCODING        4
#define __po_hi_c_Core_Frequence_T_REQUIRED_BITS_FOR_ENCODING        32
#define __po_hi_c_Core_Frequence_T_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define __po_hi_c_Core_Frequence_T_REQUIRED_BITS_FOR_ACN_ENCODING        32

#ifndef ERR___po_hi_c_Core_Frequence_T 
#define ERR___po_hi_c_Core_Frequence_T		1000 /* (0..4294967295) */
#endif

void __po_hi_c_Core_Frequence_T_Initialize(__po_hi_c_Core_Frequence_T* pVal);
flag __po_hi_c_Core_Frequence_T_IsConstraintValid(const __po_hi_c_Core_Frequence_T* val, int* pErrCode);
flag __po_hi_c_Core_Frequence_T_Equal(const __po_hi_c_Core_Frequence_T* val1, const __po_hi_c_Core_Frequence_T* val2);



typedef asn1SccSint __po_hi_c_Node_Addr_T;

#define __po_hi_c_Node_Addr_T_REQUIRED_BYTES_FOR_ENCODING        1
#define __po_hi_c_Node_Addr_T_REQUIRED_BITS_FOR_ENCODING        8
#define __po_hi_c_Node_Addr_T_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define __po_hi_c_Node_Addr_T_REQUIRED_BITS_FOR_ACN_ENCODING        8

#ifndef ERR___po_hi_c_Node_Addr_T 
#define ERR___po_hi_c_Node_Addr_T		1001 /* (0..255) */
#endif

void __po_hi_c_Node_Addr_T_Initialize(__po_hi_c_Node_Addr_T* pVal);
flag __po_hi_c_Node_Addr_T_IsConstraintValid(const __po_hi_c_Node_Addr_T* val, int* pErrCode);
flag __po_hi_c_Node_Addr_T_Equal(const __po_hi_c_Node_Addr_T* val1, const __po_hi_c_Node_Addr_T* val2);



typedef asn1SccSint __po_hi_c_Clock_Division_T;

#define __po_hi_c_Clock_Division_T_REQUIRED_BYTES_FOR_ENCODING        1
#define __po_hi_c_Clock_Division_T_REQUIRED_BITS_FOR_ENCODING        8
#define __po_hi_c_Clock_Division_T_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define __po_hi_c_Clock_Division_T_REQUIRED_BITS_FOR_ACN_ENCODING        8

#ifndef ERR___po_hi_c_Clock_Division_T 
#define ERR___po_hi_c_Clock_Division_T		1002 /* (0..255) */
#endif

void __po_hi_c_Clock_Division_T_Initialize(__po_hi_c_Clock_Division_T* pVal);
flag __po_hi_c_Clock_Division_T_IsConstraintValid(const __po_hi_c_Clock_Division_T* val, int* pErrCode);
flag __po_hi_c_Clock_Division_T_Equal(const __po_hi_c_Clock_Division_T* val1, const __po_hi_c_Clock_Division_T* val2);



typedef struct {
    char devname[21];
    __po_hi_c_Node_Addr_T nodeaddr;
    __po_hi_c_Core_Frequence_T corefreq;
    __po_hi_c_Clock_Division_T clockdiv;
    flag remove_prot_id;
    flag rxblock;
    flag txblock;
    struct {
        unsigned int remove_prot_id:1;
        unsigned int rxblock:1;
        unsigned int txblock:1;
    } exist;
} __po_hi_c_spacewire_conf_t;

#define __po_hi_c_spacewire_conf_t_REQUIRED_BYTES_FOR_ENCODING        25
#define __po_hi_c_spacewire_conf_t_REQUIRED_BITS_FOR_ENCODING        199
#define __po_hi_c_spacewire_conf_t_REQUIRED_BYTES_FOR_ACN_ENCODING       28
#define __po_hi_c_spacewire_conf_t_REQUIRED_BITS_FOR_ACN_ENCODING        219

#ifndef ERR___po_hi_c_spacewire_conf_t_devname 
#define ERR___po_hi_c_spacewire_conf_t_devname		1003 /* (SIZE (1..20)) */
#endif

void __po_hi_c_spacewire_conf_t_Initialize(__po_hi_c_spacewire_conf_t* pVal);
flag __po_hi_c_spacewire_conf_t_IsConstraintValid(const __po_hi_c_spacewire_conf_t* val, int* pErrCode);
flag __po_hi_c_spacewire_conf_t_Equal(const __po_hi_c_spacewire_conf_t* val1, const __po_hi_c_spacewire_conf_t* val2);




#ifdef  __cplusplus
}
#endif

#endif
